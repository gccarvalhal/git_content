#### INTERMEDIATE GIT ####

1. Branches
2. Remotes
3. Conflicts


1. BRANCHES 

- 'Branches' = an individual version of a repo
- Git uses branches to systematically track multiple versions of files
- In each branch:
    - Some files might be the same
    - Other might be different
    - Some may not exist at all

 - !!!!! Every repo has a branch called ## main ##
 - Branch is a part of the main system (focused in something critial)

 Why use branches?

 - Multiple developer can work on a project simultaneously
 - Compare the state of a repo between branches
 - Combine contents, pushing new features to a live system
 - Each branch should have a specific purpose

### 'git branch'
- listing all branches
- create a new branch as well
- * (current branch)

### 'git switch (branch name)'
- move between branches

Exemple:
1. git branch speed-test (create a new branch called speed-test)
2. git switch speed-test (move to the speed-test branch)
or you can do both
- git switch - c speed-test (create a new branch called speed-test and switch to it)


obs: 
- creating a new branch = "branching off"
- creating 'speed-test' from main = "branching off main"


### Modifying and comparing branches

- git diff (can also compare two branches)

"git diff main summary-statistics"
- it is comparing main with the summary-statistics

- Navigating large git outputs
    - "space" to process through and q to exit


### Rename and delete branches
- git branch


### Modifying and comparing branches

# Diff recap

git diff           ## Show changes between all unstaged files and the latest commit
git diff report.md ## Show changes between an unstaged file and the latest commit
git diff --staged  ## Show changes between all staged files and the latest commit
git diff (hash 1) (has 2) ## Show changes between two commits using hashes
git diff HEAD~1 HEAD~2 ##Show changes between two commits using HEAD instead of commit hashes

## Compare branches
git diff main (name-branch)

## Navigating large git outputs

- Can produce large outputs
- 'space' to progress through
- 'q' to exit

# Rename branch
git branch -m (old name) (new name)

# Delete branch
git branch -d (branch name) -- delete a branch, which has been merged
git branch -D (branch name) -- delete a branch that has not been merged

# The purpose of branches

- Each branch should have a particular purpose
    1. Developing a new feature
    2. Debugging an error

- Once the task is complete, we incorporate the changes into production
    1. Typically the 'main' branch - "ground truth"


# MERGE: Source & Destination
- When merging two branches:
- The last commits from each branch are called 'parent commits'
    1. source: the branch we want to merge FROM
    2. destination: the branch we want to merge INTO

- When merging 'ai-assistant' into 'main':
    ai-assistant = source
    main = destination

## Merging branches
1. Move to the destination branch:
    git switch main
2. git merge 'branch name'
3. From main, to merge 'ai-assistant' into main
    - git merge 'ai-assistant'

4. from another branch: git merge source destination
 - ex: git merge 'ai-assistant' 'main'

Images:
1. Parent_Commits
2. Type_of_Merge
    - 'Fast-Foward': linnear commit history - branched off main to create ai-assistant
    - There other types of merges
3. Number_of_lines_changes
4. Files modified: A new file has been added


## Recap
You learned about merging branches in Git, which is essential for integrating changes from different branches into the main branch. Here's a summary of the key points:

Purpose of Branches: Each branch should have a specific purpose, such as developing a new feature or fixing a bug.
Merging Process:

Source and Destination: The source branch is the one you merge from, and the destination branch is the one you merge into.
Switch to Destination: First, switch to the destination branch using git checkout main.

Merge Command: Use git merge source-branch to merge the source branch into the destination branch.

# Example of merging ai-assistant into main
git checkout main
git merge ai-assistant

Merge Output: The output shows commit hashes, type of merge (e.g., fast-forward), and changes made (lines added/deleted, new files created).

You also practiced merging branches and learned the importance of creating specific branches for different tasks and deleting them once their purpose is fulfilled.

# Merge Conflicts 

- Inability to resolve differences in the contents of one or more files between branches
- Edit the same file in two branches
- Try to merge
- Output: Git does not know what version to keep


# Resolving Conflict
- Delete >>>>>>> and <<<<<<<
- SAVE: CTRL + O ; (not CTRL + 0), then ENTER
- EXIT: CTRL + X

##### WORKFLOW

1. Add to staging area

-- git add (file)

2. Commit to out current branch
-- git commit -m "Resolving README.md conflict"

3. Merge the branch to main 
-- git merge documentation

!!!! Avoid editing the same file in multiple branches

