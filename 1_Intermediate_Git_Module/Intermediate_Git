#### INTERMEDIATE GIT ####

1. Branches
2. Remotes
3. Conflicts


1. BRANCHES 

- 'Branches' = an individual version of a repo
- Git uses branches to systematically track multiple versions of files
- In each branch:
    - Some files might be the same
    - Other might be different
    - Some may not exist at all

 - !!!!! Every repo has a branch called ## main ##
 - Branch is a part of the main system (focused in something critial)

 Why use branches?

 - Multiple developer can work on a project simultaneously
 - Compare the state of a repo between branches
 - Combine contents, pushing new features to a live system
 - Each branch should have a specific purpose

### 'git branch'
- listing all branches
- create a new branch as well
- * (current branch)

### 'git switch (branch name)'
- move between branches

Exemple:
1. git branch speed-test (create a new branch called speed-test)
2. git switch speed-test (move to the speed-test branch)
or you can do both
- git switch - c speed-test (create a new branch called speed-test and switch to it)


obs: 
- creating a new branch = "branching off"
- creating 'speed-test' from main = "branching off main"


### Modifying and comparing branches

- git diff (can also compare two branches)

"git diff main summary-statistics"
- it is comparing main with the summary-statistics

- Navigating large git outputs
    - "space" to process through and q to exit


### Rename and delete branches
- git branch


### Modifying and comparing branches

# Diff recap

git diff           ## Show changes between all unstaged files and the latest commit
git diff report.md ## Show changes between an unstaged file and the latest commit
git diff --staged  ## Show changes between all staged files and the latest commit
git diff (hash 1) (has 2) ## Show changes between two commits using hashes
git diff HEAD~1 HEAD~2 ##Show changes between two commits using HEAD instead of commit hashes

## Compare branches
git diff main (name-branch)

## Navigating large git outputs

- Can produce large outputs
- 'space' to progress through
- 'q' to exit

# Rename branch
git branch -m (old name) (new name)

# Delete branch
git branch -d (branch name) -- delete a branch, which has been merged
git branch -D (branch name) -- delete a branch that has not been merged

# The purpose of branches

- Each branch should have a particular purpose
    1. Developing a new feature
    2. Debugging an error

- Once the task is complete, we incorporate the changes into production
    1. Typically the 'main' branch - "ground truth"


# MERGE: Source & Destination
- When merging two branches:
- The last commits from each branch are called 'parent commits'
    1. source: the branch we want to merge FROM
    2. destination: the branch we want to merge INTO

- When merging 'ai-assistant' into 'main':
    ai-assistant = source
    main = destination

## Merging branches
1. Move to the destination branch:
    git switch main
2. git merge 'branch name'
3. From main, to merge 'ai-assistant' into main
    - git merge 'ai-assistant'

4. from another branch: git merge source destination
 - ex: git merge 'ai-assistant' 'main'

Images:
1. Parent_Commits
2. Type_of_Merge
    - 'Fast-Foward': linnear commit history - branched off main to create ai-assistant
    - There other types of merges
3. Number_of_lines_changes
4. Files modified: A new file has been added


## Recap
You learned about merging branches in Git, which is essential for integrating changes from different branches into the main branch. Here's a summary of the key points:

Purpose of Branches: Each branch should have a specific purpose, such as developing a new feature or fixing a bug.
Merging Process:

Source and Destination: The source branch is the one you merge from, and the destination branch is the one you merge into.
Switch to Destination: First, switch to the destination branch using git checkout main.

Merge Command: Use git merge source-branch to merge the source branch into the destination branch.

# Example of merging ai-assistant into main
git checkout main
git merge ai-assistant

Merge Output: The output shows commit hashes, type of merge (e.g., fast-forward), and changes made (lines added/deleted, new files created).

You also practiced merging branches and learned the importance of creating specific branches for different tasks and deleting them once their purpose is fulfilled.

# Merge Conflicts 

- Inability to resolve differences in the contents of one or more files between branches
- Edit the same file in two branches
- Try to merge
- Output: Git does not know what version to keep


# Resolving Conflict
- Delete >>>>>>> and <<<<<<<
- SAVE: CTRL + O ; (not CTRL + 0), then ENTER
- EXIT: CTRL + X

##### WORKFLOW

1. Add to staging area

-- git add (file)

2. Commit to out current branch
-- git commit -m "Resolving README.md conflict"

3. Merge the branch to main 
-- git merge documentation

!!!! Avoid editing the same file in multiple branches


# INTRODUCTION TO REMOTE

Why use remote reops?
 - Everything is backed up
 - Collaboration, regardless of location


# Cloning a repo (local)
- Repo copies on our local computer = local remotes

1. Making copies = cloning
git clone path-to-project-repo

2. Cloning a local project
git clone /home/george/repo

3. Cloning and naming a local project
git clone /home/george/repo new_repo

# Cloning a remote
- remote repos are generallly stored in an online hosting service
Ex: GitHub, Bitbucket or GitLab

If we have an account:
- We can cline a remote repo on to our local computer

git clone URL
git clone https://github.com/datacamp/project


# Identifying a remote

- When cloning a repo
    - Git remembers where the original was

- Git stores a remote 'tag' in the new repo's configuration

- List all remotes associated with the repo
git remote (list all the remote connections)
git remote -v (v is verbose - get more ingormastion about the remote)

# Creating a remote
- When cloning, Git will automatically name the remote 'origin'

- -> git remote add name URL

name = name of the remote repo
URL = path to the directory

Create a remote called 'george' and it is the same as 'origin'
- -> git remote add georme https://github.com/george_datacamp/repo

Defining a remote names is useful for mearging

# Pulling from remotes

- Remote vs Local

# Fetching from a remote
- Synchronize the file in a remote to a local repo we need to fetch branches from the remote
- Fetch from the 'origin' remote

git fetch origin

- it fetches all branches from the remote into the local repo
- Might create new local branches if they only existed in the remote
- Does not merge the remote's contents into local repo

- fetch only the origin remote's main branch

git fetch origin main

- it will fetch from remote to local the main branch (HEAD or last commit)


# Synchronizing content

- merge 'origin' remote's default branch (main) into the local repo's current branch
- If you are already connected to remote, it will just upload the niew version of the main version file

git merge origin


# Pulling from a remote

- pull, fetch and merge at the same time
- fetch and merge from the remote's default (main) into the local repo's current branch

git pull origin (branch name if you want to select)


!!!! If you do changes on files and do not commit it. If you try to pull, it wont work. Git will recommend to 
save and commit your files, before pulling repo from remote. Save locally before pulling from a remote.


# Pushing to remotes

- Pull: Fetch and Merge (bring from remote)
- Push: Merge local's repo content into remote
- Before pushing, we must save changes !!

git push REMOTE(origin) LOCA_BRANCH(main branch of a file)

"Push into remote from local_branch"

Push changes into 'origin' from the local repo's main branch

git push origin main


# Workflow

1. Pull data from remote to local
2. Make changes in main or new branches
3. Save all content, commit changes
4. Push to remote

git pull --no-edit origin main
(not recommended, unless we are very confident in the history of our project !!)


!!! Pushing a new local branch

1. Working in 'hotfix' branch locally
2. 'hotfix' does not exist in the remote

git push origin hotfox -- it will upload a new branch of the main file





